import external.libc.config;

#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/spi.h>
#include <libopencm3/stm32/common/spi_common_v1.h>

@nogc:
nothrow:

#define SPI_IFACE SPI2
#define CS GPIO12
#define CLK GPIO13
#define DIN GPIO14
#define DOUT GPIO15

void blink_gpio_setup_temporary_disabled()
{
    rcc_periph_clock_enable(RCC_GPIOB);

    #ifdef STM32F1
        gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO1);
    #else
        gpio_mode_setup(GPIOC, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
    #endif
}

void spi_setup()
{
    rcc_periph_clock_enable(RCC_GPIOB);

    // Configure GPIOs:
    gpio_mode_setup(
        GPIOB,
        GPIO_MODE_AF,
        GPIO_PUPD_NONE, // 10K resistor added into PCB
        CLK |
        DIN | // Input (MISO)
        DOUT  // Output (MOSI)
    );

    gpio_set_af(
        GPIOB,
        GPIO_AF5,
        CLK |
        DIN | // Input (MISO)
        DOUT  // Output (MOSI)
    );

    gpio_set_output_options(
        GPIOB,
        GPIO_OTYPE_OD,
        GPIO_OSPEED_2MHZ,
        CLK |
        DOUT  // Output (MOSI)
    );

    rcc_periph_clock_enable(RCC_SPI2);

    /* Reset SPI, SPI_CR1 register cleared, SPI is disabled */
    spi_reset(SPI_IFACE);

    /* Set up SPI in Master mode with:
    * Clock baud rate: 1/64 of peripheral clock frequency
    * Clock polarity: Idle High
    * Clock phase: Data valid on 2nd clock pulse
    * Data frame format: 8-bit
    * Frame format: MSB First
    */
    spi_init_master(
        SPI_IFACE,
        SPI_CR1_BAUDRATE_FPCLK_DIV_64,
        SPI_CR1_CPOL_CLK_TO_1_WHEN_IDLE,
        SPI_CR1_CPHA_CLK_TRANSITION_2,
        SPI_CR1_DFF_16BIT,
        SPI_CR1_MSBFIRST
    );

    /*
    * Set NSS management to software.
    *
    * Note:
    * Setting nss high is very important, even if we are controlling the GPIO
    * ourselves this bit needs to be at least set to 1, otherwise the spi
    * peripheral will not send any data out.
    */
    spi_set_master_mode(SPI_IFACE);
    spi_set_unidirectional_mode(SPI_IFACE);

    spi_enable_ss_output(SPI_IFACE);

    /* Enable SPI periph. */
    spi_enable(SPI_IFACE);

    // Chip select:
    #ifndef STM32F1
        gpio_mode_setup(GPIOB, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, CS);
    #endif
}

void sendDataToSegmentDisplay(ushort data)
{
    spi_xfer(SPI_IFACE, data);
}

void beginRefresh()
{
    gpio_clear(GPIOB, CS);
}

void endRefresh()
{
    gpio_set(GPIOB, CS);
}
